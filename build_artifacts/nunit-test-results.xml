<?xml version="1.0" encoding="utf-8" standalone="no"?>
<!--This file represents the results of running a test suite-->
<test-results name="D:\Home\MassTransit\tests\MassTransit.Tests.dll" total="242" errors="0" failures="0" not-run="27" inconclusive="0" ignored="27" skipped="0" invalid="0" date="2011-04-04" time="15:27:33">
  <environment nunit-version="2.5.9.10348" clr-version="2.0.50727.5420" os-version="Microsoft Windows NT 6.1.7601 Service Pack 1" platform="Win32NT" cwd="D:\Home\MassTransit" machine-name="EGQDSPC-2008R2" user="egqdspc" user-domain="NAMCK" />
  <culture-info current-culture="en-US" current-uiculture="en-US" />
  <test-suite type="Assembly" name="D:\Home\MassTransit\tests\MassTransit.Tests.dll" executed="True" result="Success" success="True" time="252.794" asserts="0">
    <results>
      <test-suite type="Namespace" name="MassTransit" executed="True" result="Success" success="True" time="252.770" asserts="0">
        <results>
          <test-suite type="SetUpFixture" name="Tests" executed="True" result="Success" success="True" time="252.768" asserts="0">
            <results>
              <test-suite type="TestFixture" name="A_subscribed_consumer" executed="True" result="Success" success="True" time="7.127" asserts="0">
                <results>
                  <test-case name="MassTransit.Tests.A_subscribed_consumer.Should_request_an_instance_of_the_consumer_for_each_message" executed="True" result="Success" success="True" time="7.107" asserts="1" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Configuration_Specs" executed="True" result="Success" success="True" time="3.601" asserts="0">
                <results>
                  <test-case name="MassTransit.Tests.Configuration_Specs.Setting_a_specific_message_serializer_on_the_endpoint_should_work" executed="True" result="Success" success="True" time="3.600" asserts="1" />
                </results>
              </test-suite>
              <test-suite type="Namespace" name="Distributor" executed="True" result="Success" success="True" time="47.694" asserts="0">
                <results>
                  <test-suite type="TestFixture" name="Default_distributor_specifications" executed="True" result="Success" success="True" time="28.012" asserts="0">
                    <results>
                      <test-case name="MassTransit.Tests.Distributor.Default_distributor_specifications.Can_collect_iworkeravaiable_messages" executed="True" result="Success" success="True" time="8.384" asserts="1" />
                      <test-case name="MassTransit.Tests.Distributor.Default_distributor_specifications.Ensure_workers_will_respond_to_ping_request" executed="True" result="Success" success="True" time="3.454" asserts="1" />
                      <test-case name="MassTransit.Tests.Distributor.Default_distributor_specifications.The_pipeline_viewer_should_show_the_distributor" executed="True" result="Success" success="True" time="4.375" asserts="0" />
                      <test-case name="MassTransit.Tests.Distributor.Default_distributor_specifications.Using_the_load_generator_should_share_the_load" executed="True" result="Success" success="True" time="11.800" asserts="4" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="Distributor_with_custom_worker_selection_strategy" executed="True" result="Success" success="True" time="11.425" asserts="0">
                    <results>
                      <test-case name="MassTransit.Tests.Distributor.Distributor_with_custom_worker_selection_strategy.Node_a_should_recieve_all_the_work" executed="True" result="Success" success="True" time="11.423" asserts="3" />
                    </results>
                  </test-suite>
                  <test-suite type="GenericFixture" name="DistributorSagaTestFixture&lt;TTransportFactory&gt;" executed="True" result="Inconclusive" success="False" time="0.003" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="DistributorSagaTestFixture&lt;TTransportFactory&gt;" executed="False" result="NotRunnable">
                        <reason>
                          <message><![CDATA[Fixture type contains generic parameters. You must either provide Type arguments or specify constructor arguments that allow NUnit to deduce the Type arguments.]]></message>
                        </reason>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="GenericFixture" name="DistributorTestFixture&lt;TTransportFactory&gt;" executed="True" result="Inconclusive" success="False" time="0.000" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="DistributorTestFixture&lt;TTransportFactory&gt;" executed="False" result="NotRunnable">
                        <reason>
                          <message><![CDATA[Fixture type contains generic parameters. You must either provide Type arguments or specify constructor arguments that allow NUnit to deduce the Type arguments.]]></message>
                        </reason>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="LoopbackDistributorSagaTestFixture" executed="True" result="Inconclusive" success="False" time="0.000" asserts="0" />
                  <test-suite type="TestFixture" name="LoopbackDistributorTestFixture" executed="True" result="Inconclusive" success="False" time="0.001" asserts="0" />
                  <test-suite type="TestFixture" name="Using_the_distributor_for_a_saga" executed="True" result="Success" success="True" time="4.205" asserts="0">
                    <results>
                      <test-case name="MassTransit.Tests.Distributor.Using_the_distributor_for_a_saga.Should_have_a_subscription_for_the_first_command" executed="True" result="Success" success="True" time="2.144" asserts="0" />
                      <test-case name="MassTransit.Tests.Distributor.Using_the_distributor_for_a_saga.Should_have_a_subscription_for_the_pending_command" executed="True" result="Success" success="True" time="2.060" asserts="0" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="Using_the_distributor_saga_worker_for_a_saga" executed="True" result="Success" success="True" time="4.048" asserts="0">
                    <results>
                      <test-case name="MassTransit.Tests.Distributor.Using_the_distributor_saga_worker_for_a_saga.Should_register_the_message_consumers" executed="True" result="Success" success="True" time="4.047" asserts="0" />
                    </results>
                  </test-suite>
                </results>
              </test-suite>
              <test-suite type="Namespace" name="Examples" executed="True" result="Success" success="True" time="1.686" asserts="0">
                <results>
                  <test-suite type="TestFixture" name="Given_a_consumer_is_subscribed_to_a_message" executed="True" result="Inconclusive" success="False" time="0.081" asserts="0" />
                  <test-suite type="TestFixture" name="Given_a_consumer_is_subscribed_to_a_message_on_a_remote_bus" executed="True" result="Inconclusive" success="False" time="0.191" asserts="0" />
                  <test-suite type="TestFixture" name="Given_a_consumer_is_subscribed_to_a_message_on_the_remote_bus" executed="True" result="Inconclusive" success="False" time="0.130" asserts="0" />
                  <test-suite type="TestFixture" name="Given_a_pong_service" executed="True" result="Inconclusive" success="False" time="0.118" asserts="0" />
                  <test-suite type="Namespace" name="Sagas" executed="True" result="Success" success="True" time="0.342" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Given_a_simple_saga_does_not_exist" executed="True" result="Inconclusive" success="False" time="0.126" asserts="0" />
                      <test-suite type="TestFixture" name="Given_a_simple_saga_exists_and_is_waiting_for_approval" executed="True" result="Inconclusive" success="False" time="0.062" asserts="0" />
                      <test-suite type="TestFixture" name="When_a_start_message_is_received" executed="True" result="Success" success="True" time="0.078" asserts="0">
                        <results>
                          <test-case name="MassTransit.Tests.Examples.Sagas.When_a_start_message_is_received.A_new_saga_should_be_created" executed="True" result="Success" success="True" time="0.029" asserts="1" />
                          <test-case name="MassTransit.Tests.Examples.Sagas.When_a_start_message_is_received.The_customer_id_should_be_set" executed="True" result="Success" success="True" time="0.012" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="When_an_approval_message_is_published" executed="True" result="Success" success="True" time="0.073" asserts="0">
                        <results>
                          <test-case name="MassTransit.Tests.Examples.Sagas.When_an_approval_message_is_published.The_saga_should_be_in_the_waiting_for_finish_state" executed="True" result="Success" success="True" time="0.011" asserts="0" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="When_a_message_is_published_to_the_bus" executed="True" result="Success" success="True" time="0.077" asserts="0">
                    <results>
                      <test-case name="MassTransit.Tests.Examples.When_a_message_is_published_to_the_bus.The_consumer_should_receive_the_message" executed="True" result="Success" success="True" time="0.016" asserts="1" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="When_a_message_is_published_to_the_local_bus" executed="True" result="Success" success="True" time="0.133" asserts="0">
                    <results>
                      <test-case name="MassTransit.Tests.Examples.When_a_message_is_published_to_the_local_bus.The_consumer_should_receive_the_message" executed="True" result="Success" success="True" time="0.008" asserts="1" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="When_a_message_is_published_via_the_local_bus" executed="True" result="Success" success="True" time="0.405" asserts="0">
                    <results>
                      <test-case name="MassTransit.Tests.Examples.When_a_message_is_published_via_the_local_bus.The_consumer_should_receive_the_message" executed="True" result="Success" success="True" time="0.002" asserts="1" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="When_a_message_is_sent_to_the_bus_endpoint" executed="True" result="Success" success="True" time="0.065" asserts="0">
                    <results>
                      <test-case name="MassTransit.Tests.Examples.When_a_message_is_sent_to_the_bus_endpoint.The_consumer_should_receive_the_message" executed="True" result="Success" success="True" time="0.007" asserts="1" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="When_a_ping_is_published" executed="True" result="Success" success="True" time="0.142" asserts="0">
                    <results>
                      <test-case name="MassTransit.Tests.Examples.When_a_ping_is_published.The_response_should_have_been_received" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                    </results>
                  </test-suite>
                </results>
              </test-suite>
              <test-suite type="Namespace" name="Groups" executed="True" result="Success" success="True" time="1.530" asserts="0">
                <results>
                  <test-suite type="TestFixture" name="Group_Specs" executed="True" result="Success" success="True" time="1.530" asserts="0">
                    <results>
                      <test-case name="MassTransit.Tests.Groups.Group_Specs.It_should_be_easy_to_build_and_send_a_group_of_messages" executed="True" result="Success" success="True" time="0.512" asserts="1" />
                      <test-case name="MassTransit.Tests.Groups.Group_Specs.It_should_be_easy_to_build_and_send_a_group_of_messages_with_multiple_messages" executed="True" result="Success" success="True" time="0.511" asserts="1" />
                      <test-case name="MassTransit.Tests.Groups.Group_Specs.Multiple_groups_should_be_combinable_into_a_single_group" executed="True" result="Success" success="True" time="0.507" asserts="1" />
                    </results>
                  </test-suite>
                </results>
              </test-suite>
              <test-suite type="Namespace" name="Internal" executed="True" result="Success" success="True" time="0.012" asserts="0">
                <results>
                  <test-suite type="TestFixture" name="IdempotentHashtable_Specs" executed="True" result="Success" success="True" time="0.006" asserts="0">
                    <results>
                      <test-case name="MassTransit.Tests.Internal.IdempotentHashtable_Specs.Adds" executed="True" result="Success" success="True" time="0.004" asserts="2" />
                      <test-case name="MassTransit.Tests.Internal.IdempotentHashtable_Specs.Removes" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="IdempotentList_Specs" executed="True" result="Success" success="True" time="0.006" asserts="0">
                    <results>
                      <test-case name="MassTransit.Tests.Internal.IdempotentList_Specs.Add" executed="True" result="Success" success="True" time="0.003" asserts="2" />
                      <test-case name="MassTransit.Tests.Internal.IdempotentList_Specs.Remove" executed="True" result="Success" success="True" time="0.002" asserts="1" />
                    </results>
                  </test-suite>
                </results>
              </test-suite>
              <test-suite type="Namespace" name="Load" executed="True" result="Inconclusive" success="False" time="0.000" asserts="0">
                <results>
                  <test-suite type="TestFixture" name="RequestResponse_LoadTest" executed="True" result="Inconclusive" success="False" time="0.000" asserts="0" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="MessageContext_Specs" executed="True" result="Success" success="True" time="5.276" asserts="0">
                <results>
                  <test-case name="MassTransit.Tests.MessageContext_Specs.A_response_should_be_published_if_no_reply_address_is_specified" executed="True" result="Success" success="True" time="1.109" asserts="3" />
                  <test-case name="MassTransit.Tests.MessageContext_Specs.A_response_should_be_sent_directly_if_a_reply_address_is_specified" executed="True" result="Success" success="True" time="1.595" asserts="3" />
                  <test-case name="MassTransit.Tests.MessageContext_Specs.The_destination_address_should_pass" executed="True" result="Success" success="True" time="0.519" asserts="2" />
                  <test-case name="MassTransit.Tests.MessageContext_Specs.The_fault_address_should_pass" executed="True" result="Success" success="True" time="0.518" asserts="2" />
                  <test-case name="MassTransit.Tests.MessageContext_Specs.The_response_address_should_pass" executed="True" result="Success" success="True" time="1.018" asserts="2" />
                  <test-case name="MassTransit.Tests.MessageContext_Specs.The_source_address_should_pass" executed="True" result="Success" success="True" time="0.518" asserts="2" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="MessageGroup_Specs" executed="True" result="Success" success="True" time="3.090" asserts="0">
                <results>
                  <test-case name="MassTransit.Tests.MessageGroup_Specs.I_should_be_able_to_join_a_bunch_of_messages_into_a_group" executed="True" result="Success" success="True" time="0.516" asserts="3" />
                  <test-case name="MassTransit.Tests.MessageGroup_Specs.I_should_be_able_to_retrieve_a_single_message_by_position" executed="True" result="Success" success="True" time="0.515" asserts="0" />
                  <test-case name="MassTransit.Tests.MessageGroup_Specs.I_should_be_able_to_split_a_bunch_of_messages_from_a_group" executed="True" result="Success" success="True" time="0.511" asserts="1" />
                  <test-case name="MassTransit.Tests.MessageGroup_Specs.I_should_be_able_to_split_the_group_into_individual_messages_and_handle_each_one_on_its_own" executed="True" result="Success" success="True" time="0.522" asserts="0" />
                  <test-case name="MassTransit.Tests.MessageGroup_Specs.I_should_get_an_exception_when_I_try_to_get_an_unmatched_type" executed="True" result="Success" success="True" time="0.513" asserts="1" />
                  <test-case name="MassTransit.Tests.MessageGroup_Specs.One" executed="True" result="Success" success="True" time="0.513" asserts="3" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="MessageInterceptor_Specs" executed="True" result="Success" success="True" time="0.527" asserts="0">
                <results>
                  <test-case name="MassTransit.Tests.MessageInterceptor_Specs.An_interceptor_should_be_called_when_a_message_is_received" executed="True" result="Success" success="True" time="0.526" asserts="3" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="MessageQueueEndpoint_MeetsCriteria" executed="True" result="Success" success="True" time="0.521" asserts="0">
                <results>
                  <test-case name="MassTransit.Tests.MessageQueueEndpoint_MeetsCriteria.Subscring_to_an_endpoint_should_accept_and_dispatch_messages" executed="True" result="Success" success="True" time="0.520" asserts="1" />
                </results>
              </test-suite>
              <test-suite type="Namespace" name="Pipeline" executed="True" result="Success" success="True" time="1.596" asserts="0">
                <results>
                  <test-suite type="TestFixture" name="BatchConsumer_Specs" executed="True" result="Success" success="True" time="0.205" asserts="0">
                    <results>
                      <test-case name="MassTransit.Tests.Pipeline.BatchConsumer_Specs.A_batch_component_should_be_delivered_messages" executed="True" result="Success" success="True" time="0.146" asserts="1" />
                      <test-case name="MassTransit.Tests.Pipeline.BatchConsumer_Specs.A_batch_consumer_should_be_delivered_a_lot_of_messages" executed="True" result="Success" success="True" time="0.047" asserts="1" />
                      <test-case name="MassTransit.Tests.Pipeline.BatchConsumer_Specs.A_batch_consumer_should_be_delivered_messages" executed="True" result="Success" success="True" time="0.010" asserts="1" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="MessageRouter_Perf" executed="True" result="Inconclusive" success="False" time="0.001" asserts="0" />
                  <test-suite type="TestFixture" name="The_SubscriptionPublisher_should_add_subscriptions" executed="True" result="Success" success="True" time="0.455" asserts="0">
                    <results>
                      <test-case name="MassTransit.Tests.Pipeline.The_SubscriptionPublisher_should_add_subscriptions.for_batch_component_subscriptions" executed="True" result="Success" success="True" time="0.318" asserts="0" />
                      <test-case name="MassTransit.Tests.Pipeline.The_SubscriptionPublisher_should_add_subscriptions.for_batch_subscriptions" executed="True" result="Success" success="True" time="0.041" asserts="0" />
                      <test-case name="MassTransit.Tests.Pipeline.The_SubscriptionPublisher_should_add_subscriptions.for_component_subscriptions" executed="True" result="Success" success="True" time="0.015" asserts="0" />
                      <test-case name="MassTransit.Tests.Pipeline.The_SubscriptionPublisher_should_add_subscriptions.for_correlated_subscriptions" executed="True" result="Success" success="True" time="0.021" asserts="0" />
                      <test-case name="MassTransit.Tests.Pipeline.The_SubscriptionPublisher_should_add_subscriptions.for_regular_subscriptions" executed="True" result="Success" success="True" time="0.020" asserts="0" />
                      <test-case name="MassTransit.Tests.Pipeline.The_SubscriptionPublisher_should_add_subscriptions.for_selective_component_subscriptions" executed="True" result="Success" success="True" time="0.021" asserts="0" />
                      <test-case name="MassTransit.Tests.Pipeline.The_SubscriptionPublisher_should_add_subscriptions.for_selective_subscriptions" executed="True" result="Success" success="True" time="0.016" asserts="0" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="The_SubscriptionPublisher_should_remove_subscriptions" executed="True" result="Success" success="True" time="0.190" asserts="0">
                    <results>
                      <test-case name="MassTransit.Tests.Pipeline.The_SubscriptionPublisher_should_remove_subscriptions.for_batch_subscriptions" executed="True" result="Success" success="True" time="0.039" asserts="0" />
                      <test-case name="MassTransit.Tests.Pipeline.The_SubscriptionPublisher_should_remove_subscriptions.for_batch_subscriptions_but_not_when_another_exists" executed="True" result="Success" success="True" time="0.026" asserts="0" />
                      <test-case name="MassTransit.Tests.Pipeline.The_SubscriptionPublisher_should_remove_subscriptions.for_component_subscriptions" executed="True" result="Success" success="True" time="0.009" asserts="0" />
                      <test-case name="MassTransit.Tests.Pipeline.The_SubscriptionPublisher_should_remove_subscriptions.for_correlated_subscriptions" executed="True" result="Success" success="True" time="0.017" asserts="0" />
                      <test-case name="MassTransit.Tests.Pipeline.The_SubscriptionPublisher_should_remove_subscriptions.for_correlated_subscriptions_but_not_when_another_exists" executed="True" result="Success" success="True" time="0.040" asserts="0" />
                      <test-case name="MassTransit.Tests.Pipeline.The_SubscriptionPublisher_should_remove_subscriptions.for_regular_subscriptions" executed="True" result="Success" success="True" time="0.011" asserts="0" />
                      <test-case name="MassTransit.Tests.Pipeline.The_SubscriptionPublisher_should_remove_subscriptions.for_selective_component_subscriptions" executed="True" result="Success" success="True" time="0.030" asserts="0" />
                      <test-case name="MassTransit.Tests.Pipeline.The_SubscriptionPublisher_should_remove_subscriptions.for_selective_subscriptions" executed="True" result="Success" success="True" time="0.017" asserts="0" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="Throughput_Specs" executed="True" result="Inconclusive" success="False" time="0.001" asserts="0" />
                  <test-suite type="TestFixture" name="When_building_a_pipeline" executed="True" result="Success" success="True" time="0.068" asserts="0">
                    <results>
                      <test-case name="MassTransit.Tests.Pipeline.When_building_a_pipeline.The_builder_should_stay_with_the_pipeline" executed="True" result="Success" success="True" time="0.057" asserts="0" />
                      <test-case name="MassTransit.Tests.Pipeline.When_building_a_pipeline.The_pipeline_should_be_happy" executed="True" result="Success" success="True" time="0.010" asserts="1" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="When_filtering_messages_on_the_pipeline" executed="True" result="Success" success="True" time="0.121" asserts="0">
                    <results>
                      <test-case name="MassTransit.Tests.Pipeline.When_filtering_messages_on_the_pipeline.A_filter_should_be_nameable" executed="True" result="Success" success="True" time="0.036" asserts="1" />
                      <test-case name="MassTransit.Tests.Pipeline.When_filtering_messages_on_the_pipeline.A_filter_should_be_removable" executed="False" result="Ignored">
                        <reason>
                          <message><![CDATA[This is a planned feature, but is not yet functional.]]></message>
                        </reason>
                      </test-case>
                      <test-case name="MassTransit.Tests.Pipeline.When_filtering_messages_on_the_pipeline.A_filtered_message_should_not_be_received" executed="True" result="Success" success="True" time="0.009" asserts="1" />
                      <test-case name="MassTransit.Tests.Pipeline.When_filtering_messages_on_the_pipeline.A_message_should_fall_throuh_happy_filters" executed="True" result="Success" success="True" time="0.012" asserts="1" />
                      <test-case name="MassTransit.Tests.Pipeline.When_filtering_messages_on_the_pipeline.An_object_filter_should_pass_the_message_if_allowed" executed="True" result="Success" success="True" time="0.041" asserts="1" />
                      <test-case name="MassTransit.Tests.Pipeline.When_filtering_messages_on_the_pipeline.An_unfiltered_message_should_be_received" executed="True" result="Success" success="True" time="0.009" asserts="1" />
                      <test-case name="MassTransit.Tests.Pipeline.When_filtering_messages_on_the_pipeline.I_should_be_able_to_filter_on_object" executed="True" result="Success" success="True" time="0.009" asserts="1" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="When_pushing_a_message_through_an_outbound_pipeline" executed="True" result="Success" success="True" time="0.036" asserts="0">
                    <results>
                      <test-case name="MassTransit.Tests.Pipeline.When_pushing_a_message_through_an_outbound_pipeline.The_endpoint_consumer_should_be_returned" executed="True" result="Success" success="True" time="0.035" asserts="0" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="When_subscribing_a_consumer_to_the_pipeline" executed="True" result="Success" success="True" time="0.306" asserts="0">
                    <results>
                      <test-case name="MassTransit.Tests.Pipeline.When_subscribing_a_consumer_to_the_pipeline.A_bunch_of_mixed_subscriber_types_should_work" executed="True" result="Success" success="True" time="0.029" asserts="5" />
                      <test-case name="MassTransit.Tests.Pipeline.When_subscribing_a_consumer_to_the_pipeline.A_component_should_be_subscribed_to_multiple_messages_on_the_pipeline" executed="True" result="Success" success="True" time="0.082" asserts="0" />
                      <test-case name="MassTransit.Tests.Pipeline.When_subscribing_a_consumer_to_the_pipeline.A_component_should_be_subscribed_to_the_pipeline" executed="True" result="Success" success="True" time="0.050" asserts="0" />
                      <test-case name="MassTransit.Tests.Pipeline.When_subscribing_a_consumer_to_the_pipeline.A_selective_component_should_properly_handle_the_love" executed="True" result="Success" success="True" time="0.057" asserts="0" />
                      <test-case name="MassTransit.Tests.Pipeline.When_subscribing_a_consumer_to_the_pipeline.Correlated_subscriptions_should_make_happy_sounds" executed="True" result="Success" success="True" time="0.032" asserts="2" />
                      <test-case name="MassTransit.Tests.Pipeline.When_subscribing_a_consumer_to_the_pipeline.The_subscription_should_be_added" executed="True" result="Success" success="True" time="0.009" asserts="1" />
                      <test-case name="MassTransit.Tests.Pipeline.When_subscribing_a_consumer_to_the_pipeline.The_subscription_should_be_added_for_selective_consumers" executed="True" result="Success" success="True" time="0.009" asserts="1" />
                      <test-case name="MassTransit.Tests.Pipeline.When_subscribing_a_consumer_to_the_pipeline.The_subscription_should_be_added_for_selective_consumers_that_are_interested" executed="True" result="Success" success="True" time="0.010" asserts="1" />
                      <test-case name="MassTransit.Tests.Pipeline.When_subscribing_a_consumer_to_the_pipeline.The_wrong_type_of_message_should_not_blow_up_the_test" executed="True" result="Success" success="True" time="0.024" asserts="1" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="When_subscription_a_component_to_the_pipeline" executed="True" result="Success" success="True" time="0.162" asserts="0">
                    <results>
                      <test-case name="MassTransit.Tests.Pipeline.When_subscription_a_component_to_the_pipeline.The_appropriate_handler_should_be_added" executed="True" result="Success" success="True" time="0.053" asserts="1" />
                      <test-case name="MassTransit.Tests.Pipeline.When_subscription_a_component_to_the_pipeline.The_pipeline_should_have_insertable_items" executed="True" result="Success" success="True" time="0.032" asserts="2" />
                      <test-case name="MassTransit.Tests.Pipeline.When_subscription_a_component_to_the_pipeline.The_subscriptions_should_be_a_separate_concern_from_the_pipeline" executed="True" result="Success" success="True" time="0.056" asserts="1" />
                      <test-case name="MassTransit.Tests.Pipeline.When_subscription_a_component_to_the_pipeline.When_nobody_wants_the_message_it_should_not_be_accepted" executed="True" result="Success" success="True" time="0.002" asserts="1" />
                      <test-case name="MassTransit.Tests.Pipeline.When_subscription_a_component_to_the_pipeline.When_somebody_gets_the_message_it_should_be_accepted" executed="True" result="Success" success="True" time="0.006" asserts="1" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="When_visiting_an_object_graph" executed="True" result="Success" success="True" time="0.021" asserts="0">
                    <results>
                      <test-case name="MassTransit.Tests.Pipeline.When_visiting_an_object_graph.Only_a_single_method_should_dispatch_the_information" executed="True" result="Success" success="True" time="0.021" asserts="0" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="When_working_with_an_existing_pipeline" executed="True" result="Success" success="True" time="0.022" asserts="0">
                    <results>
                      <test-case name="MassTransit.Tests.Pipeline.When_working_with_an_existing_pipeline.I_want_to_display_a_more_detailed_flow" executed="True" result="Success" success="True" time="0.015" asserts="0" />
                      <test-case name="MassTransit.Tests.Pipeline.When_working_with_an_existing_pipeline.I_want_to_display_the_entire_flow_through_the_pipeline" executed="True" result="Success" success="True" time="0.005" asserts="0" />
                    </results>
                  </test-suite>
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="PublishSubscribe_Specs" executed="True" result="Success" success="True" time="0.517" asserts="0">
                <results>
                  <test-case name="MassTransit.Tests.PublishSubscribe_Specs.A_simple_bus_should_be_able_to_subscribe_and_publish" executed="True" result="Success" success="True" time="0.516" asserts="1" />
                </results>
              </test-suite>
              <test-suite type="Namespace" name="Reactive" executed="True" result="Success" success="True" time="0.293" asserts="0">
                <results>
                  <test-suite type="TestFixture" name="ServiceBusSubscriptionSpecs" executed="True" result="Success" success="True" time="0.293" asserts="0">
                    <results>
                      <test-case name="MassTransit.Tests.Reactive.ServiceBusSubscriptionSpecs.WhenUnsubscribedIsCalledShouldCallAction" executed="True" result="Success" success="True" time="0.292" asserts="1" />
                    </results>
                  </test-suite>
                </results>
              </test-suite>
              <test-suite type="Namespace" name="Saga" executed="True" result="Success" success="True" time="6.917" asserts="0">
                <results>
                  <test-suite type="Namespace" name="Locator" executed="True" result="Success" success="True" time="0.103" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="SagaExpression_Specs" executed="True" result="Success" success="True" time="0.050" asserts="0">
                        <results>
                          <test-case name="MassTransit.Tests.Saga.Locator.SagaExpression_Specs.Matching_by_property_should_be_happy" executed="True" result="Success" success="True" time="0.038" asserts="1" />
                          <test-case name="MassTransit.Tests.Saga.Locator.SagaExpression_Specs.The_saga_expression_should_be_converted_down_to_a_saga_only_filter" executed="True" result="Success" success="True" time="0.011" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="When_using_the_state_machine_with_noncorrelated_messages" executed="True" result="Success" success="True" time="0.052" asserts="0">
                        <results>
                          <test-case name="MassTransit.Tests.Saga.Locator.When_using_the_state_machine_with_noncorrelated_messages.A_nice_interface_should_be_available_for_defining_saga_locators" executed="True" result="Success" success="True" time="0.051" asserts="0" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="StateMachine" executed="True" result="Success" success="True" time="3.784" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="AutoStateMachine_Specs" executed="True" result="Success" success="True" time="1.018" asserts="0">
                        <results>
                          <test-case name="MassTransit.Tests.Saga.StateMachine.AutoStateMachine_Specs.A_state_machine_based_saga_should_automatically_wire_up_subscriptions" executed="True" result="Success" success="True" time="1.018" asserts="5" />
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="Inspecting_a_state_machine_driven_saga" executed="True" result="Success" success="True" time="0.091" asserts="0">
                        <results>
                          <test-case name="MassTransit.Tests.Saga.StateMachine.Inspecting_a_state_machine_driven_saga.Should_contain_the_complete_event" executed="True" result="Success" success="True" time="0.019" asserts="0" />
                          <test-case name="MassTransit.Tests.Saga.StateMachine.Inspecting_a_state_machine_driven_saga.Should_contain_the_initiate_event" executed="True" result="Success" success="True" time="0.003" asserts="0" />
                          <test-case name="MassTransit.Tests.Saga.StateMachine.Inspecting_a_state_machine_driven_saga.Should_contain_the_observation_event" executed="True" result="Success" success="True" time="0.010" asserts="0" />
                          <test-case name="MassTransit.Tests.Saga.StateMachine.Inspecting_a_state_machine_driven_saga.Should_include_the_initial_state_for_the_initiate_event" executed="True" result="Success" success="True" time="0.019" asserts="1" />
                          <test-case name="MassTransit.Tests.Saga.StateMachine.Inspecting_a_state_machine_driven_saga.Should_return_all_of_the_events" executed="True" result="Success" success="True" time="0.003" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="SagaFault_Specs" executed="True" result="Success" success="True" time="0.515" asserts="0">
                        <results>
                          <test-case name="MassTransit.Tests.Saga.StateMachine.SagaFault_Specs.The_saga_should_be_subscribable" executed="True" result="Success" success="True" time="0.508" asserts="0" />
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="SagaStateMachine_Specs" executed="True" result="Success" success="True" time="0.049" asserts="0">
                        <results>
                          <test-case name="MassTransit.Tests.Saga.StateMachine.SagaStateMachine_Specs.The_good_times_should_roll" executed="True" result="Success" success="True" time="0.016" asserts="3" />
                          <test-case name="MassTransit.Tests.Saga.StateMachine.SagaStateMachine_Specs.The_saga_state_machine_should_add_value_for_sagas" executed="True" result="Success" success="True" time="0.002" asserts="2" />
                          <test-case name="MassTransit.Tests.Saga.StateMachine.SagaStateMachine_Specs.The_visualizer_should_work" executed="True" result="Success" success="True" time="0.031" asserts="0" />
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="Subscribing_a_saga_state_machine" executed="True" result="Inconclusive" success="False" time="0.001" asserts="0" />
                      <test-suite type="TestFixture" name="When_an_existing_saga_receives_an_initiating_message" executed="True" result="Success" success="True" time="0.552" asserts="0">
                        <results>
                          <test-case name="MassTransit.Tests.Saga.StateMachine.When_an_existing_saga_receives_an_initiating_message.An_exception_should_be_thrown" executed="True" result="Success" success="True" time="0.508" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="When_an_initiating_message_for_a_saga_arrives" executed="True" result="Success" success="True" time="1.552" asserts="0">
                        <results>
                          <test-case name="MassTransit.Tests.Saga.StateMachine.When_an_initiating_message_for_a_saga_arrives.The_saga_should_be_created_when_an_initiating_message_is_received" executed="True" result="Success" success="True" time="0.515" asserts="2" />
                          <test-case name="MassTransit.Tests.Saga.StateMachine.When_an_initiating_message_for_a_saga_arrives.The_saga_should_be_loaded_when_an_observed_message_is_received" executed="True" result="Success" success="True" time="0.519" asserts="2" />
                          <test-case name="MassTransit.Tests.Saga.StateMachine.When_an_initiating_message_for_a_saga_arrives.The_saga_should_be_loaded_when_an_orchestrated_message_is_received" executed="True" result="Success" success="True" time="0.519" asserts="2" />
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="When_sagas_are_subscribed_to_the_service_bus" executed="True" result="Inconclusive" success="False" time="0.000" asserts="0">
                        <results>
                          <test-case name="MassTransit.Tests.Saga.StateMachine.When_sagas_are_subscribed_to_the_service_bus.Should_publish_subscriptions_for_saga_subscriptions" executed="False" result="Ignored">
                            <reason>
                              <message><![CDATA[Rhino Mock 3.6 Bug]]></message>
                            </reason>
                          </test-case>
                          <test-case name="MassTransit.Tests.Saga.StateMachine.When_sagas_are_subscribed_to_the_service_bus.Should_remove_subscriptions_for_saga_subscriptions" executed="False" result="Ignored">
                            <reason>
                              <message><![CDATA[Rhino Mock 3.6 Bug]]></message>
                            </reason>
                          </test-case>
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="StateMachineInspector_Specs" executed="True" result="Success" success="True" time="0.092" asserts="0">
                    <results>
                      <test-case name="MassTransit.Tests.Saga.StateMachineInspector_Specs.FirstTestName" executed="True" result="Success" success="True" time="0.090" asserts="0" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="When_a_saga_has_a_builder_property" executed="True" result="Success" success="True" time="0.003" asserts="0">
                    <results>
                      <test-case name="MassTransit.Tests.Saga.When_a_saga_has_a_builder_property.The_object_builder_should_be_set_by_the_framework" executed="True" result="Success" success="True" time="0.000" asserts="0" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="When_a_unknown_user_registers" executed="True" result="Success" success="True" time="0.823" asserts="0">
                    <results>
                      <test-case name="MassTransit.Tests.Saga.When_a_unknown_user_registers.The_user_should_be_pending" executed="True" result="Success" success="True" time="0.822" asserts="2" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="When_an_existing_saga_receives_an_initiating_message" executed="True" result="Success" success="True" time="0.533" asserts="0">
                    <results>
                      <test-case name="MassTransit.Tests.Saga.When_an_existing_saga_receives_an_initiating_message.An_exception_should_be_thrown" executed="True" result="Success" success="True" time="0.533" asserts="1" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="When_an_initiating_message_for_a_saga_arrives" executed="True" result="Success" success="True" time="1.576" asserts="0">
                    <results>
                      <test-case name="MassTransit.Tests.Saga.When_an_initiating_message_for_a_saga_arrives.The_saga_should_be_created_when_an_initiating_message_is_received" executed="True" result="Success" success="True" time="0.526" asserts="1" />
                      <test-case name="MassTransit.Tests.Saga.When_an_initiating_message_for_a_saga_arrives.The_saga_should_be_loaded_when_an_observed_message_is_received" executed="True" result="Success" success="True" time="0.522" asserts="2" />
                      <test-case name="MassTransit.Tests.Saga.When_an_initiating_message_for_a_saga_arrives.The_saga_should_be_loaded_when_an_orchestrated_message_is_received" executed="True" result="Success" success="True" time="0.528" asserts="2" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="When_sagas_are_subscribed_to_the_service_bus" executed="True" result="Inconclusive" success="False" time="0.000" asserts="0">
                    <results>
                      <test-case name="MassTransit.Tests.Saga.When_sagas_are_subscribed_to_the_service_bus.Should_publish_subscriptions_for_saga_subscriptions" executed="False" result="Ignored">
                        <reason>
                          <message><![CDATA[Rhino Mock 3.6 Bug]]></message>
                        </reason>
                      </test-case>
                      <test-case name="MassTransit.Tests.Saga.When_sagas_are_subscribed_to_the_service_bus.Should_remove_subscriptions_for_saga_subscriptions" executed="False" result="Ignored">
                        <reason>
                          <message><![CDATA[Rhino Mock 3.6 Bug]]></message>
                        </reason>
                      </test-case>
                    </results>
                  </test-suite>
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Sending_a_message_that_implements_an_interface" executed="True" result="Success" success="True" time="1.125" asserts="0">
                <results>
                  <test-case name="MassTransit.Tests.Sending_a_message_that_implements_an_interface.Should_deliver_the_message_to_an_both_interested_consumers" executed="True" result="Success" success="True" time="0.600" asserts="2" />
                  <test-case name="MassTransit.Tests.Sending_a_message_that_implements_an_interface.Should_deliver_the_message_to_an_interested_consumer" executed="True" result="Success" success="True" time="0.524" asserts="1" />
                </results>
              </test-suite>
              <test-suite type="Namespace" name="Serialization" executed="True" result="Success" success="True" time="50.563" asserts="0">
                <results>
                  <test-suite type="TestFixture" name="Deserializing_a_message_with_a_different_clr_version" executed="True" result="Success" success="True" time="0.277" asserts="0">
                    <results>
                      <test-case name="MassTransit.Tests.Serialization.Deserializing_a_message_with_a_different_clr_version.Should_handle_the_uri_type" executed="True" result="Success" success="True" time="0.271" asserts="2" />
                      <test-case name="MassTransit.Tests.Serialization.Deserializing_a_message_with_a_different_clr_version.Should_not_cause_fatal_explosions_of_the_fiery_death_kind" executed="True" result="Success" success="True" time="0.004" asserts="2" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="MoreSerializationForBinary" executed="True" result="Success" success="True" time="0.222" asserts="0">
                    <results>
                      <test-case name="MassTransit.Tests.Serialization.MoreSerializationForBinary.MoreSerialization_Specs`1.A_collection_of_objects_should_be_properly_serialized" executed="True" result="Success" success="True" time="0.091" asserts="7" />
                      <test-case name="MassTransit.Tests.Serialization.MoreSerializationForBinary.MoreSerialization_Specs`1.A_dictionary_of_objects_should_be_properly_serialized" executed="True" result="Success" success="True" time="0.018" asserts="7" />
                      <test-case name="MassTransit.Tests.Serialization.MoreSerializationForBinary.MoreSerialization_Specs`1.A_nested_object_should_be_properly_serialized" executed="True" result="Success" success="True" time="0.011" asserts="7" />
                      <test-case name="MassTransit.Tests.Serialization.MoreSerializationForBinary.MoreSerialization_Specs`1.A_primitive_array_of_objects_should_be_properly_serialized" executed="True" result="Success" success="True" time="0.027" asserts="7" />
                      <test-case name="MassTransit.Tests.Serialization.MoreSerializationForBinary.MoreSerialization_Specs`1.A_private_setter_should_be_serializable" executed="True" result="Success" success="True" time="0.011" asserts="7" />
                      <test-case name="MassTransit.Tests.Serialization.MoreSerializationForBinary.MoreSerialization_Specs`1.An_array_of_objects_should_be_properly_serialized" executed="True" result="Success" success="True" time="0.022" asserts="7" />
                      <test-case name="MassTransit.Tests.Serialization.MoreSerializationForBinary.MoreSerialization_Specs`1.An_empty_array_of_objects_should_be_properly_serialized" executed="True" result="Success" success="True" time="0.002" asserts="7" />
                      <test-case name="MassTransit.Tests.Serialization.MoreSerializationForBinary.MoreSerialization_Specs`1.An_empty_class_should_not_break_the_mold" executed="True" result="Success" success="True" time="0.024" asserts="7" />
                      <test-case name="MassTransit.Tests.Serialization.MoreSerializationForBinary.MoreSerialization_Specs`1.An_enumeration_should_be_serializable" executed="True" result="Success" success="True" time="0.013" asserts="7" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="MoreSerializationForCustomXml" executed="True" result="Success" success="True" time="0.321" asserts="0">
                    <results>
                      <test-case name="MassTransit.Tests.Serialization.MoreSerializationForCustomXml.MoreSerialization_Specs`1.A_collection_of_objects_should_be_properly_serialized" executed="True" result="Success" success="True" time="0.073" asserts="7" />
                      <test-case name="MassTransit.Tests.Serialization.MoreSerializationForCustomXml.MoreSerialization_Specs`1.A_dictionary_of_objects_should_be_properly_serialized" executed="True" result="Success" success="True" time="0.076" asserts="7" />
                      <test-case name="MassTransit.Tests.Serialization.MoreSerializationForCustomXml.MoreSerialization_Specs`1.A_nested_object_should_be_properly_serialized" executed="True" result="Success" success="True" time="0.004" asserts="7" />
                      <test-case name="MassTransit.Tests.Serialization.MoreSerializationForCustomXml.MoreSerialization_Specs`1.A_primitive_array_of_objects_should_be_properly_serialized" executed="True" result="Success" success="True" time="0.044" asserts="7" />
                      <test-case name="MassTransit.Tests.Serialization.MoreSerializationForCustomXml.MoreSerialization_Specs`1.A_private_setter_should_be_serializable" executed="True" result="Success" success="True" time="0.016" asserts="7" />
                      <test-case name="MassTransit.Tests.Serialization.MoreSerializationForCustomXml.MoreSerialization_Specs`1.An_array_of_objects_should_be_properly_serialized" executed="True" result="Success" success="True" time="0.038" asserts="7" />
                      <test-case name="MassTransit.Tests.Serialization.MoreSerializationForCustomXml.MoreSerialization_Specs`1.An_empty_array_of_objects_should_be_properly_serialized" executed="True" result="Success" success="True" time="0.000" asserts="7" />
                      <test-case name="MassTransit.Tests.Serialization.MoreSerializationForCustomXml.MoreSerialization_Specs`1.An_empty_class_should_not_break_the_mold" executed="True" result="Success" success="True" time="0.016" asserts="7" />
                      <test-case name="MassTransit.Tests.Serialization.MoreSerializationForCustomXml.MoreSerialization_Specs`1.An_enumeration_should_be_serializable" executed="True" result="Success" success="True" time="0.040" asserts="7" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="MoreSerializationForDotNotXml" executed="False" result="Ignored">
                    <reason>
                      <message><![CDATA[Just can't keep up with the others]]></message>
                    </reason>
                    <results>
                      <test-case name="MassTransit.Tests.Serialization.MoreSerializationForDotNotXml.MoreSerialization_Specs`1.A_collection_of_objects_should_be_properly_serialized" executed="False" result="Ignored">
                        <reason>
                          <message><![CDATA[Just can't keep up with the others]]></message>
                        </reason>
                      </test-case>
                      <test-case name="MassTransit.Tests.Serialization.MoreSerializationForDotNotXml.MoreSerialization_Specs`1.A_dictionary_of_objects_should_be_properly_serialized" executed="False" result="Ignored">
                        <reason>
                          <message><![CDATA[Just can't keep up with the others]]></message>
                        </reason>
                      </test-case>
                      <test-case name="MassTransit.Tests.Serialization.MoreSerializationForDotNotXml.MoreSerialization_Specs`1.A_nested_object_should_be_properly_serialized" executed="False" result="Ignored">
                        <reason>
                          <message><![CDATA[Just can't keep up with the others]]></message>
                        </reason>
                      </test-case>
                      <test-case name="MassTransit.Tests.Serialization.MoreSerializationForDotNotXml.MoreSerialization_Specs`1.A_primitive_array_of_objects_should_be_properly_serialized" executed="False" result="Ignored">
                        <reason>
                          <message><![CDATA[Just can't keep up with the others]]></message>
                        </reason>
                      </test-case>
                      <test-case name="MassTransit.Tests.Serialization.MoreSerializationForDotNotXml.MoreSerialization_Specs`1.A_private_setter_should_be_serializable" executed="False" result="Ignored">
                        <reason>
                          <message><![CDATA[Just can't keep up with the others]]></message>
                        </reason>
                      </test-case>
                      <test-case name="MassTransit.Tests.Serialization.MoreSerializationForDotNotXml.MoreSerialization_Specs`1.An_array_of_objects_should_be_properly_serialized" executed="False" result="Ignored">
                        <reason>
                          <message><![CDATA[Just can't keep up with the others]]></message>
                        </reason>
                      </test-case>
                      <test-case name="MassTransit.Tests.Serialization.MoreSerializationForDotNotXml.MoreSerialization_Specs`1.An_empty_array_of_objects_should_be_properly_serialized" executed="False" result="Ignored">
                        <reason>
                          <message><![CDATA[Just can't keep up with the others]]></message>
                        </reason>
                      </test-case>
                      <test-case name="MassTransit.Tests.Serialization.MoreSerializationForDotNotXml.MoreSerialization_Specs`1.An_empty_class_should_not_break_the_mold" executed="False" result="Ignored">
                        <reason>
                          <message><![CDATA[Just can't keep up with the others]]></message>
                        </reason>
                      </test-case>
                      <test-case name="MassTransit.Tests.Serialization.MoreSerializationForDotNotXml.MoreSerialization_Specs`1.An_enumeration_should_be_serializable" executed="False" result="Ignored">
                        <reason>
                          <message><![CDATA[Just can't keep up with the others]]></message>
                        </reason>
                      </test-case>
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="MoreSerializationForJson" executed="True" result="Success" success="True" time="0.976" asserts="0">
                    <results>
                      <test-case name="MassTransit.Tests.Serialization.MoreSerializationForJson.MoreSerialization_Specs`1.A_collection_of_objects_should_be_properly_serialized" executed="True" result="Success" success="True" time="0.792" asserts="7" />
                      <test-case name="MassTransit.Tests.Serialization.MoreSerializationForJson.MoreSerialization_Specs`1.A_dictionary_of_objects_should_be_properly_serialized" executed="True" result="Success" success="True" time="0.040" asserts="7" />
                      <test-case name="MassTransit.Tests.Serialization.MoreSerializationForJson.MoreSerialization_Specs`1.A_nested_object_should_be_properly_serialized" executed="True" result="Success" success="True" time="0.003" asserts="7" />
                      <test-case name="MassTransit.Tests.Serialization.MoreSerializationForJson.MoreSerialization_Specs`1.A_primitive_array_of_objects_should_be_properly_serialized" executed="True" result="Success" success="True" time="0.021" asserts="7" />
                      <test-case name="MassTransit.Tests.Serialization.MoreSerializationForJson.MoreSerialization_Specs`1.A_private_setter_should_be_serializable" executed="True" result="Success" success="True" time="0.054" asserts="7" />
                      <test-case name="MassTransit.Tests.Serialization.MoreSerializationForJson.MoreSerialization_Specs`1.An_array_of_objects_should_be_properly_serialized" executed="True" result="Success" success="True" time="0.010" asserts="7" />
                      <test-case name="MassTransit.Tests.Serialization.MoreSerializationForJson.MoreSerialization_Specs`1.An_empty_array_of_objects_should_be_properly_serialized" executed="True" result="Success" success="True" time="0.009" asserts="7" />
                      <test-case name="MassTransit.Tests.Serialization.MoreSerializationForJson.MoreSerialization_Specs`1.An_empty_class_should_not_break_the_mold" executed="True" result="Success" success="True" time="0.025" asserts="7" />
                      <test-case name="MassTransit.Tests.Serialization.MoreSerializationForJson.MoreSerialization_Specs`1.An_enumeration_should_be_serializable" executed="True" result="Success" success="True" time="0.021" asserts="7" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="Serializing_a_property_of_type_char" executed="True" result="Success" success="True" time="0.088" asserts="0">
                    <results>
                      <test-case name="MassTransit.Tests.Serialization.Serializing_a_property_of_type_char.Should_handle_a_missing_nullable_value" executed="True" result="Success" success="True" time="0.026" asserts="1" />
                      <test-case name="MassTransit.Tests.Serialization.Serializing_a_property_of_type_char.Should_handle_a_present_nullable_value" executed="True" result="Success" success="True" time="0.024" asserts="1" />
                      <test-case name="MassTransit.Tests.Serialization.Serializing_a_property_of_type_char.Should_handle_a_present_value" executed="True" result="Success" success="True" time="0.031" asserts="1" />
                      <test-case name="MassTransit.Tests.Serialization.Serializing_a_property_of_type_char.Should_handle_a_string_null" executed="True" result="Success" success="True" time="0.004" asserts="1" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="Serializing_a_string_with_an_escaped_character" executed="True" result="Success" success="True" time="0.035" asserts="0">
                    <results>
                      <test-case name="MassTransit.Tests.Serialization.Serializing_a_string_with_an_escaped_character.Should_handle_a_missing_nullable_value" executed="True" result="Success" success="True" time="0.034" asserts="1" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="WhenUsingBinary" executed="False" result="Ignored">
                    <reason>
                      <message><![CDATA[the built in binary serializer doesn't support this feature]]></message>
                    </reason>
                    <results>
                      <test-case name="MassTransit.Tests.Serialization.WhenUsingBinary.Deserializing_an_interface`1.Should_create_a_proxy_for_the_interface" executed="False" result="Ignored">
                        <reason>
                          <message><![CDATA[the built in binary serializer doesn't support this feature]]></message>
                        </reason>
                      </test-case>
                      <test-case name="MassTransit.Tests.Serialization.WhenUsingBinary.Deserializing_an_interface`1.Should_deserialize_into_the_proxy_object" executed="False" result="Ignored">
                        <reason>
                          <message><![CDATA[the built in binary serializer doesn't support this feature]]></message>
                        </reason>
                      </test-case>
                      <test-case name="MassTransit.Tests.Serialization.WhenUsingBinary.Deserializing_an_interface`1.Should_dispatch_an_interface_via_the_pipeline" executed="False" result="Ignored">
                        <reason>
                          <message><![CDATA[the built in binary serializer doesn't support this feature]]></message>
                        </reason>
                      </test-case>
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="WhenUsingBinaryAndHeaders" executed="True" result="Success" success="True" time="0.029" asserts="0">
                    <results>
                      <test-case name="MassTransit.Tests.Serialization.WhenUsingBinaryAndHeaders.Setting_the_message_expiration`1.Should_carry_through_the_message_headers" executed="True" result="Success" success="True" time="0.021" asserts="1" />
                      <test-case name="MassTransit.Tests.Serialization.WhenUsingBinaryAndHeaders.Setting_the_message_expiration`1.Should_not_impact_others_if_not_set" executed="True" result="Success" success="True" time="0.006" asserts="0" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="WhenUsingBinaryInPerfTest" executed="True" result="Success" success="True" time="14.066" asserts="0">
                    <results>
                      <test-case name="MassTransit.Tests.Serialization.WhenUsingBinaryInPerfTest.Performance_Specs`1.Just_how_fast_are_you" executed="True" result="Success" success="True" time="14.065" asserts="0">
                        <categories>
                          <category name="Integration" />
                        </categories>
                      </test-case>
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="WhenUsingBinaryWithEncryption" executed="True" result="Success" success="True" time="0.041" asserts="0">
                    <results>
                      <test-case name="MassTransit.Tests.Serialization.WhenUsingBinaryWithEncryption.PreSharedKeyEncryptedSerialization_Specs`1.The_encrypted_serializer_should_be_awesome" executed="True" result="Success" success="True" time="0.039" asserts="1" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="WhenUsingCustomXml" executed="True" result="Success" success="True" time="0.112" asserts="0">
                    <results>
                      <test-case name="MassTransit.Tests.Serialization.WhenUsingCustomXml.Deserializing_an_interface`1.Should_create_a_proxy_for_the_interface" executed="True" result="Success" success="True" time="0.063" asserts="7" />
                      <test-case name="MassTransit.Tests.Serialization.WhenUsingCustomXml.Deserializing_an_interface`1.Should_deserialize_into_the_proxy_object" executed="True" result="Success" success="True" time="0.004" asserts="1" />
                      <test-case name="MassTransit.Tests.Serialization.WhenUsingCustomXml.Deserializing_an_interface`1.Should_dispatch_an_interface_via_the_pipeline" executed="True" result="Success" success="True" time="0.038" asserts="1" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="WhenUsingCustomXmlAndHeaders" executed="True" result="Success" success="True" time="0.023" asserts="0">
                    <results>
                      <test-case name="MassTransit.Tests.Serialization.WhenUsingCustomXmlAndHeaders.Setting_the_message_expiration`1.Should_carry_through_the_message_headers" executed="True" result="Success" success="True" time="0.009" asserts="1" />
                      <test-case name="MassTransit.Tests.Serialization.WhenUsingCustomXmlAndHeaders.Setting_the_message_expiration`1.Should_not_impact_others_if_not_set" executed="True" result="Success" success="True" time="0.010" asserts="0" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="WhenUsingCustomXmlInPerfTest" executed="True" result="Success" success="True" time="10.914" asserts="0">
                    <results>
                      <test-case name="MassTransit.Tests.Serialization.WhenUsingCustomXmlInPerfTest.Performance_Specs`1.Just_how_fast_are_you" executed="True" result="Success" success="True" time="10.909" asserts="0">
                        <categories>
                          <category name="Integration" />
                        </categories>
                      </test-case>
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="WhenUsingCustomXmlWithEncryption" executed="True" result="Success" success="True" time="0.048" asserts="0">
                    <results>
                      <test-case name="MassTransit.Tests.Serialization.WhenUsingCustomXmlWithEncryption.PreSharedKeyEncryptedSerialization_Specs`1.The_encrypted_serializer_should_be_awesome" executed="True" result="Success" success="True" time="0.047" asserts="1" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="WhenUsingDotNotXml" executed="False" result="Ignored">
                    <reason>
                      <message><![CDATA[the built in dot net xml serializer doesn't support this feature]]></message>
                    </reason>
                    <results>
                      <test-case name="MassTransit.Tests.Serialization.WhenUsingDotNotXml.Deserializing_an_interface`1.Should_create_a_proxy_for_the_interface" executed="False" result="Ignored">
                        <reason>
                          <message><![CDATA[the built in dot net xml serializer doesn't support this feature]]></message>
                        </reason>
                      </test-case>
                      <test-case name="MassTransit.Tests.Serialization.WhenUsingDotNotXml.Deserializing_an_interface`1.Should_deserialize_into_the_proxy_object" executed="False" result="Ignored">
                        <reason>
                          <message><![CDATA[the built in dot net xml serializer doesn't support this feature]]></message>
                        </reason>
                      </test-case>
                      <test-case name="MassTransit.Tests.Serialization.WhenUsingDotNotXml.Deserializing_an_interface`1.Should_dispatch_an_interface_via_the_pipeline" executed="False" result="Ignored">
                        <reason>
                          <message><![CDATA[the built in dot net xml serializer doesn't support this feature]]></message>
                        </reason>
                      </test-case>
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="WhenUsingDotNotXmlAndHeaders" executed="True" result="Success" success="True" time="0.000" asserts="0">
                    <results>
                      <test-case name="MassTransit.Tests.Serialization.WhenUsingDotNotXmlAndHeaders.Setting_the_message_expiration`1.Should_carry_through_the_message_headers" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="MassTransit.Tests.Serialization.WhenUsingDotNotXmlAndHeaders.Setting_the_message_expiration`1.Should_not_impact_others_if_not_set" executed="True" result="Success" success="True" time="0.000" asserts="0" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="WhenUsingDotNotXmlInPerfTest" executed="True" result="Success" success="True" time="10.179" asserts="0">
                    <results>
                      <test-case name="MassTransit.Tests.Serialization.WhenUsingDotNotXmlInPerfTest.Performance_Specs`1.Just_how_fast_are_you" executed="True" result="Success" success="True" time="10.136" asserts="0">
                        <categories>
                          <category name="Integration" />
                        </categories>
                      </test-case>
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="WhenUsingDotNotXmlOnSimpleMessage" executed="True" result="Success" success="True" time="0.566" asserts="0">
                    <results>
                      <test-case name="MassTransit.Tests.Serialization.WhenUsingDotNotXmlOnSimpleMessage.GivenASimpleMessage`1.ShouldWork" executed="True" result="Success" success="True" time="0.565" asserts="1" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="WhenUsingDotNotXmlWithEncryption" executed="True" result="Success" success="True" time="1.048" asserts="0">
                    <results>
                      <test-case name="MassTransit.Tests.Serialization.WhenUsingDotNotXmlWithEncryption.PreSharedKeyEncryptedSerialization_Specs`1.The_encrypted_serializer_should_be_awesome" executed="True" result="Success" success="True" time="1.047" asserts="1" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="WhenUsingJson" executed="False" result="Ignored">
                    <reason>
                      <message><![CDATA[the current impl of json serilaization doesn't support this feature]]></message>
                    </reason>
                    <results>
                      <test-case name="MassTransit.Tests.Serialization.WhenUsingJson.Deserializing_an_interface`1.Should_create_a_proxy_for_the_interface" executed="False" result="Ignored">
                        <reason>
                          <message><![CDATA[the current impl of json serilaization doesn't support this feature]]></message>
                        </reason>
                      </test-case>
                      <test-case name="MassTransit.Tests.Serialization.WhenUsingJson.Deserializing_an_interface`1.Should_deserialize_into_the_proxy_object" executed="False" result="Ignored">
                        <reason>
                          <message><![CDATA[the current impl of json serilaization doesn't support this feature]]></message>
                        </reason>
                      </test-case>
                      <test-case name="MassTransit.Tests.Serialization.WhenUsingJson.Deserializing_an_interface`1.Should_dispatch_an_interface_via_the_pipeline" executed="False" result="Ignored">
                        <reason>
                          <message><![CDATA[the current impl of json serilaization doesn't support this feature]]></message>
                        </reason>
                      </test-case>
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="WhenUsingJsonAndHeaders" executed="True" result="Success" success="True" time="0.010" asserts="0">
                    <results>
                      <test-case name="MassTransit.Tests.Serialization.WhenUsingJsonAndHeaders.Setting_the_message_expiration`1.Should_carry_through_the_message_headers" executed="True" result="Success" success="True" time="0.008" asserts="1" />
                      <test-case name="MassTransit.Tests.Serialization.WhenUsingJsonAndHeaders.Setting_the_message_expiration`1.Should_not_impact_others_if_not_set" executed="True" result="Success" success="True" time="0.002" asserts="0" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="WhenUsingJsonInPerfTest" executed="True" result="Success" success="True" time="11.387" asserts="0">
                    <results>
                      <test-case name="MassTransit.Tests.Serialization.WhenUsingJsonInPerfTest.Performance_Specs`1.Just_how_fast_are_you" executed="True" result="Success" success="True" time="11.384" asserts="0">
                        <categories>
                          <category name="Integration" />
                        </categories>
                      </test-case>
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="WhenUsingJsonOnComplexMessage" executed="True" result="Success" success="True" time="0.014" asserts="0">
                    <results>
                      <test-case name="MassTransit.Tests.Serialization.WhenUsingJsonOnComplexMessage.GivenAComplexMessage`1.ShouldWork" executed="True" result="Success" success="True" time="0.011" asserts="1" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="WhenUsingJsonOnSimpleMessage" executed="True" result="Success" success="True" time="0.007" asserts="0">
                    <results>
                      <test-case name="MassTransit.Tests.Serialization.WhenUsingJsonOnSimpleMessage.GivenASimpleMessage`1.ShouldWork" executed="True" result="Success" success="True" time="0.006" asserts="1" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="WhenUsingJsonWithEncryption" executed="True" result="Success" success="True" time="0.034" asserts="0">
                    <results>
                      <test-case name="MassTransit.Tests.Serialization.WhenUsingJsonWithEncryption.PreSharedKeyEncryptedSerialization_Specs`1.The_encrypted_serializer_should_be_awesome" executed="True" result="Success" success="True" time="0.034" asserts="1" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="WhenUsingTheBinaryOnComplexMessage" executed="True" result="Success" success="True" time="0.003" asserts="0">
                    <results>
                      <test-case name="MassTransit.Tests.Serialization.WhenUsingTheBinaryOnComplexMessage.GivenAComplexMessage`1.ShouldWork" executed="True" result="Success" success="True" time="0.002" asserts="1" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="WhenUsingTheBinaryOnSimpleMessage" executed="True" result="Success" success="True" time="0.003" asserts="0">
                    <results>
                      <test-case name="MassTransit.Tests.Serialization.WhenUsingTheBinaryOnSimpleMessage.GivenASimpleMessage`1.ShouldWork" executed="True" result="Success" success="True" time="0.002" asserts="1" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="WhenUsingTheCustomXmlOnComplexMessage" executed="True" result="Success" success="True" time="0.025" asserts="0">
                    <results>
                      <test-case name="MassTransit.Tests.Serialization.WhenUsingTheCustomXmlOnComplexMessage.GivenAComplexMessage`1.ShouldWork" executed="True" result="Success" success="True" time="0.005" asserts="1" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="WhenUsingTheCustomXmlOnSimpleMessage" executed="True" result="Success" success="True" time="0.019" asserts="0">
                    <results>
                      <test-case name="MassTransit.Tests.Serialization.WhenUsingTheCustomXmlOnSimpleMessage.GivenASimpleMessage`1.ShouldWork" executed="True" result="Success" success="True" time="0.019" asserts="1" />
                    </results>
                  </test-suite>
                </results>
              </test-suite>
              <test-suite type="Namespace" name="Services" executed="True" result="Success" success="True" time="58.937" asserts="0">
                <results>
                  <test-suite type="Namespace" name="HealthMonitoring" executed="True" result="Success" success="True" time="58.596" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="HealthService_Specs" executed="True" result="Success" success="True" time="58.593" asserts="0">
                        <results>
                          <test-case name="MassTransit.Tests.Services.HealthMonitoring.HealthService_Specs.If_a_heartbeat_is_missed_the_saga_should_mark_the_endpoint_suspect" executed="True" result="Success" success="True" time="8.404" asserts="4" />
                          <test-case name="MassTransit.Tests.Services.HealthMonitoring.HealthService_Specs.If_a_saga_is_suspect_a_heartbeat_should_fix" executed="True" result="Success" success="True" time="8.124" asserts="4" />
                          <test-case name="MassTransit.Tests.Services.HealthMonitoring.HealthService_Specs.If_a_saga_is_suspect_a_pingtimeout_should_make_it_down" executed="True" result="Success" success="True" time="18.149" asserts="5" />
                          <test-case name="MassTransit.Tests.Services.HealthMonitoring.HealthService_Specs.If_a_saga_is_suspect_a_pong_should_fix" executed="True" result="Success" success="True" time="10.667" asserts="4" />
                          <test-case name="MassTransit.Tests.Services.HealthMonitoring.HealthService_Specs.If_endpoint_down_a_heartbeat_should_revive" executed="True" result="Success" success="True" time="9.639" asserts="7" />
                          <test-case name="MassTransit.Tests.Services.HealthMonitoring.HealthService_Specs.The_HealthClient_should_publish_heartbeats" executed="True" result="Success" success="True" time="3.607" asserts="2" />
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="HealthServiceTestFixture" executed="True" result="Inconclusive" success="False" time="0.001" asserts="0" />
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="Metadata" executed="True" result="Success" success="True" time="0.022" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="MessageMetadataExtraction_spec" executed="True" result="Success" success="True" time="0.022" asserts="0">
                        <results>
                          <test-case name="MassTransit.Tests.Services.Metadata.MessageMetadataExtraction_spec.I_need_to_extract_metadata_from_objects" executed="True" result="Success" success="True" time="0.009" asserts="6" />
                          <test-case name="MassTransit.Tests.Services.Metadata.MessageMetadataExtraction_spec.PipelineBuilding" executed="True" result="Success" success="True" time="0.014" asserts="0" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="Routing" executed="True" result="Success" success="True" time="0.164" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="RoutingConfiguration_Specs" executed="True" result="Success" success="True" time="0.163" asserts="0">
                        <results>
                          <test-case name="MassTransit.Tests.Services.Routing.RoutingConfiguration_Specs.ConfigurationTest" executed="True" result="Success" success="True" time="0.162" asserts="0" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="Subscriptions" executed="True" result="Success" success="True" time="0.150" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="When_the_consumer_receives_a_subscription" executed="True" result="Success" success="True" time="0.150" asserts="0">
                        <results>
                          <test-case name="MassTransit.Tests.Services.Subscriptions.When_the_consumer_receives_a_subscription.It_should_not_be_added_to_the_pipeline_for_local_subscribers" executed="True" result="Success" success="True" time="0.149" asserts="0" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="StreamExtensionsTests" executed="True" result="Success" success="True" time="0.009" asserts="0">
                <results>
                  <test-case name="MassTransit.Tests.StreamExtensionsTests.Really" executed="True" result="Success" success="True" time="0.008" asserts="1" />
                </results>
              </test-suite>
              <test-suite type="Namespace" name="Subscriptions" executed="True" result="Success" success="True" time="10.236" asserts="0">
                <results>
                  <test-suite type="TestFixture" name="Adding_a_correlated_subscription_via_the_subscription_client" executed="True" result="Success" success="True" time="4.559" asserts="0">
                    <results>
                      <test-case name="MassTransit.Tests.Subscriptions.Adding_a_correlated_subscription_via_the_subscription_client.Should_properly_register_the_consumers_for_each_endpoint" executed="True" result="Success" success="True" time="4.558" asserts="1" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="SubscriptionService_Specs" executed="True" result="Success" success="True" time="5.677" asserts="0">
                    <results>
                      <test-case name="MassTransit.Tests.Subscriptions.SubscriptionService_Specs.Removing_a_subscription_twice_should_not_have_a_negative_impact" executed="True" result="Success" success="True" time="2.567" asserts="0" />
                      <test-case name="MassTransit.Tests.Subscriptions.SubscriptionService_Specs.The_initial_subscriptions_should_be_read_from_the_repository" executed="False" result="Ignored">
                        <reason>
                          <message><![CDATA[]]></message>
                        </reason>
                      </test-case>
                      <test-case name="MassTransit.Tests.Subscriptions.SubscriptionService_Specs.The_system_should_be_ready_to_use_before_getting_underway" executed="True" result="Success" success="True" time="3.098" asserts="1" />
                    </results>
                  </test-suite>
                </results>
              </test-suite>
              <test-suite type="Namespace" name="TextFixtures" executed="True" result="Inconclusive" success="False" time="0.002" asserts="0">
                <results>
                  <test-suite type="TestFixture" name="LoopbackLocalAndRemoteTestFixture" executed="True" result="Inconclusive" success="False" time="0.001" asserts="0" />
                  <test-suite type="TestFixture" name="LoopbackTestFixture" executed="True" result="Inconclusive" success="False" time="0.001" asserts="0" />
                  <test-suite type="TestFixture" name="MulticastUdpTestFixture" executed="True" result="Inconclusive" success="False" time="0.000" asserts="0" />
                  <test-suite type="GenericFixture" name="SubscriptionServiceTestFixture&lt;TTransportFactory&gt;" executed="True" result="Inconclusive" success="False" time="0.000" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="SubscriptionServiceTestFixture&lt;TTransportFactory&gt;" executed="False" result="NotRunnable">
                        <reason>
                          <message><![CDATA[Fixture type contains generic parameters. You must either provide Type arguments or specify constructor arguments that allow NUnit to deduce the Type arguments.]]></message>
                        </reason>
                      </test-suite>
                    </results>
                  </test-suite>
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="The_message_retry_tracker" executed="True" result="Success" success="True" time="0.003" asserts="0">
                <results>
                  <test-case name="MassTransit.Tests.The_message_retry_tracker.Should_reset_once_the_message_was_received" executed="True" result="Success" success="True" time="0.002" asserts="7" />
                  <test-case name="MassTransit.Tests.The_message_retry_tracker.Should_return_false_until_the_limit_is_exceeded" executed="True" result="Success" success="True" time="0.001" asserts="6" />
                </results>
              </test-suite>
              <test-suite type="Namespace" name="Timeouts" executed="True" result="Success" success="True" time="3.426" asserts="0">
                <results>
                  <test-suite type="TestFixture" name="When_a_message_is_deferred" executed="True" result="Success" success="True" time="1.854" asserts="0">
                    <results>
                      <test-case name="MassTransit.Tests.Timeouts.When_a_message_is_deferred.It_should_be_received_after_the_deferral_period_elapses" executed="True" result="Success" success="True" time="1.853" asserts="1" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="When_scheduling_a_timeout_for_a_new_id" executed="True" result="Success" success="True" time="1.572" asserts="0">
                    <results>
                      <test-case name="MassTransit.Tests.Timeouts.When_scheduling_a_timeout_for_a_new_id.The_timeout_should_be_added_to_the_storage" executed="True" result="Success" success="True" time="1.572" asserts="1" />
                    </results>
                  </test-suite>
                </results>
              </test-suite>
              <test-suite type="Namespace" name="Transports" executed="True" result="Success" success="True" time="0.301" asserts="0">
                <results>
                  <test-suite type="TestFixture" name="LoopbackTransportContract" executed="True" result="Success" success="True" time="0.301" asserts="0">
                    <results>
                      <test-case name="MassTransit.Tests.Transports.LoopbackTransportContract.TransportContract`1.While_writing_it_should_perisist_even_on_rollback" executed="True" result="Success" success="True" time="0.280" asserts="3" />
                      <test-case name="MassTransit.Tests.Transports.LoopbackTransportContract.TransportContract`1.While_writing_it_should_perisist_on_complete" executed="True" result="Success" success="True" time="0.021" asserts="3" />
                      <test-case name="MassTransit.Tests.Transports.LoopbackTransportContract.TransportContract`1.While_writing_it_should_persist" executed="True" result="Success" success="True" time="0.000" asserts="3" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="When_publishing_a_message_via_multicast" executed="True" result="Inconclusive" success="False" time="0.000" asserts="0">
                    <results>
                      <test-case name="MassTransit.Tests.Transports.When_publishing_a_message_via_multicast.It_should_be_received" executed="False" result="Ignored">
                        <reason>
                          <message><![CDATA[]]></message>
                        </reason>
                      </test-case>
                    </results>
                  </test-suite>
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="What_does_the_uri_do" executed="True" result="Success" success="True" time="0.038" asserts="0">
                <results>
                  <test-case name="MassTransit.Tests.What_does_the_uri_do.An_address_in_an_invalid_format_should_throw_an_exception" executed="True" result="Success" success="True" time="0.038" asserts="1" />
                  <test-case name="MassTransit.Tests.What_does_the_uri_do.The_address_should_be_entered_in_a_URI_style_format" executed="True" result="Success" success="True" time="0.000" asserts="3" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="When_a_batch_of_message_is_published_to_a_container_based_consumer" executed="True" result="Success" success="True" time="3.087" asserts="0">
                <results>
                  <test-case name="MassTransit.Tests.When_a_batch_of_message_is_published_to_a_container_based_consumer.A_batch_with_a_lot_of_messages_should_be_received" executed="True" result="Success" success="True" time="1.020" asserts="3" />
                  <test-case name="MassTransit.Tests.When_a_batch_of_message_is_published_to_a_container_based_consumer.A_batch_with_a_single_message_should_be_received" executed="True" result="Success" success="True" time="1.018" asserts="1" />
                  <test-case name="MassTransit.Tests.When_a_batch_of_message_is_published_to_a_container_based_consumer.A_single_consumer_should_receive_the_entire_batch" executed="True" result="Success" success="True" time="1.050" asserts="1" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="When_a_batch_of_messages_is_published" executed="True" result="Success" success="True" time="3.049" asserts="0">
                <results>
                  <test-case name="MassTransit.Tests.When_a_batch_of_messages_is_published.A_batch_with_a_lot_of_messages_should_be_received" executed="True" result="Success" success="True" time="1.011" asserts="1" />
                  <test-case name="MassTransit.Tests.When_a_batch_of_messages_is_published.A_batch_with_a_single_message_should_be_received" executed="True" result="Success" success="True" time="1.020" asserts="1" />
                  <test-case name="MassTransit.Tests.When_a_batch_of_messages_is_published.A_single_consumer_should_receive_the_entire_batch" executed="True" result="Success" success="True" time="1.018" asserts="1" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="When_a_correlated_message_fault_is_received" executed="True" result="Success" success="True" time="6.237" asserts="0">
                <results>
                  <test-case name="MassTransit.Tests.When_a_correlated_message_fault_is_received.I_should_receive_a_fault_message" executed="True" result="Success" success="True" time="3.224" asserts="1" />
                  <test-case name="MassTransit.Tests.When_a_correlated_message_fault_is_received.Open_generics_should_match_properly" executed="True" result="Success" success="True" time="3.012" asserts="1" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="When_a_custom_message_group_is_defined" executed="True" result="Success" success="True" time="1.659" asserts="0">
                <results>
                  <test-case name="MassTransit.Tests.When_a_custom_message_group_is_defined.I_should_be_able_to_split_a_group_of_messages_into_parts" executed="True" result="Success" success="True" time="0.628" asserts="3" />
                  <test-case name="MassTransit.Tests.When_a_custom_message_group_is_defined.I_Should_be_able_to_subscribe" executed="True" result="Success" success="True" time="0.519" asserts="1" />
                  <test-case name="MassTransit.Tests.When_a_custom_message_group_is_defined.I_should_only_be_allowed_to_add_valid_message_types" executed="True" result="Success" success="True" time="0.510" asserts="1" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="When_a_handler_subscription_is_added" executed="True" result="Success" success="True" time="0.060" asserts="0">
                <results>
                  <test-case name="MassTransit.Tests.When_a_handler_subscription_is_added.A_subscription_should_be_added_for_a_consumer" executed="True" result="Success" success="True" time="0.024" asserts="0" />
                  <test-case name="MassTransit.Tests.When_a_handler_subscription_is_added.A_subscription_should_be_added_for_a_selective_consumer" executed="True" result="Success" success="True" time="0.021" asserts="0" />
                  <test-case name="MassTransit.Tests.When_a_handler_subscription_is_added.The_bus_should_add_a_subscription_to_the_subscription_cache" executed="True" result="Success" success="True" time="0.013" asserts="0" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="When_a_message_consumer_specifies_that_it_should_retry_a_message" executed="True" result="Success" success="True" time="1.035" asserts="0">
                <results>
                  <test-case name="MassTransit.Tests.When_a_message_consumer_specifies_that_it_should_retry_a_message.Should_do_something_nicely" executed="True" result="Success" success="True" time="0.515" asserts="1" />
                  <test-case name="MassTransit.Tests.When_a_message_consumer_specifies_that_it_should_retry_a_message.The_retry_count_should_be_set_on_the_message" executed="True" result="Success" success="True" time="0.520" asserts="3" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="When_a_message_fault_occurs" executed="True" result="Success" success="True" time="1.186" asserts="0">
                <results>
                  <test-case name="MassTransit.Tests.When_a_message_fault_occurs.I_should_receive_a_fault_message" executed="True" result="Success" success="True" time="0.680" asserts="1" />
                  <test-case name="MassTransit.Tests.When_a_message_fault_occurs.Test_this" executed="True" result="Success" success="True" time="0.506" asserts="0" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="When_a_message_filter_is_subscribed_to_the_service_bus" executed="True" result="Success" success="True" time="2.072" asserts="0">
                <results>
                  <test-case name="MassTransit.Tests.When_a_message_filter_is_subscribed_to_the_service_bus.A_message_should_only_reach_the_consumer_if_the_filter_passes_it_forward" executed="True" result="Success" success="True" time="1.551" asserts="1" />
                  <test-case name="MassTransit.Tests.When_a_message_filter_is_subscribed_to_the_service_bus.A_message_should_only_reach_the_consumer_if_the_filter_passes_it_forward_success" executed="True" result="Success" success="True" time="0.519" asserts="1" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="When_a_message_is_delivered_to_the_service_bus" executed="True" result="Success" success="True" time="1.045" asserts="0">
                <results>
                  <test-case name="MassTransit.Tests.When_a_message_is_delivered_to_the_service_bus.A_consumer_object_should_receive_the_message" executed="True" result="Success" success="True" time="0.516" asserts="1" />
                  <test-case name="MassTransit.Tests.When_a_message_is_delivered_to_the_service_bus.A_consumer_type_should_be_created_to_receive_the_message" executed="True" result="Success" success="True" time="0.529" asserts="1" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="When_a_message_is_published" executed="True" result="Success" success="True" time="10.621" asserts="0">
                <results>
                  <test-case name="MassTransit.Tests.When_a_message_is_published.It_should_be_ignored_if_there_are_no_consumers" executed="True" result="Success" success="True" time="1.009" asserts="0" />
                  <test-case name="MassTransit.Tests.When_a_message_is_published.It_should_be_received_by_a_component" executed="True" result="Success" success="True" time="1.020" asserts="1" />
                  <test-case name="MassTransit.Tests.When_a_message_is_published.It_should_be_received_by_an_interested_correlated_consumer" executed="True" result="Success" success="True" time="1.018" asserts="1" />
                  <test-case name="MassTransit.Tests.When_a_message_is_published.It_should_be_received_by_multiple_subscribed_consumers" executed="True" result="Success" success="True" time="1.016" asserts="2" />
                  <test-case name="MassTransit.Tests.When_a_message_is_published.It_should_be_received_by_one_subscribed_consumer" executed="True" result="Success" success="True" time="1.009" asserts="1" />
                  <test-case name="MassTransit.Tests.When_a_message_is_published.It_should_be_received_by_one_subscribed_message_handler" executed="True" result="Success" success="True" time="1.010" asserts="1" />
                  <test-case name="MassTransit.Tests.When_a_message_is_published.It_should_not_be_received_by_an_uninterested_consumer" executed="True" result="Success" success="True" time="1.515" asserts="2" />
                  <test-case name="MassTransit.Tests.When_a_message_is_published.It_should_not_be_received_by_an_uninterested_correlated_consumer" executed="True" result="Success" success="True" time="3.024" asserts="1" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="When_a_message_needs_to_be_reliable" executed="True" result="Success" success="True" time="0.003" asserts="0">
                <results>
                  <test-case name="MassTransit.Tests.When_a_message_needs_to_be_reliable.The_reliable_attribute_should_be_able_to_be_false" executed="True" result="Success" success="True" time="0.001" asserts="2" />
                  <test-case name="MassTransit.Tests.When_a_message_needs_to_be_reliable.The_reliable_attribute_should_be_specified" executed="True" result="Success" success="True" time="0.001" asserts="2" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="When_a_message_should_expire_after_a_period_of_time" executed="True" result="Success" success="True" time="0.002" asserts="0">
                <results>
                  <test-case name="MassTransit.Tests.When_a_message_should_expire_after_a_period_of_time.The_message_should_use_an_expiration_attribute" executed="True" result="Success" success="True" time="0.001" asserts="2" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="When_a_request_message_is_published" executed="True" result="Success" success="True" time="0.545" asserts="0">
                <results>
                  <test-case name="MassTransit.Tests.When_a_request_message_is_published.A_reply_should_be_received_by_the_requestor" executed="True" result="Success" success="True" time="0.544" asserts="2" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="When_an_incomplete_batch_is_published" executed="True" result="Inconclusive" success="False" time="0.001" asserts="0">
                <results>
                  <test-case name="MassTransit.Tests.When_an_incomplete_batch_is_published.The_batch_should_throw_an_exception_that_the_timeout_occurred" executed="False" result="Ignored">
                    <reason>
                      <message><![CDATA[]]></message>
                    </reason>
                  </test-case>
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="When_creating_a_bus_with_a_separate_control_bus" executed="True" result="Success" success="True" time="2.027" asserts="0">
                <results>
                  <test-case name="MassTransit.Tests.When_creating_a_bus_with_a_separate_control_bus.Should_purge_messages_on_startup_if_specified" executed="True" result="Success" success="True" time="2.027" asserts="0" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="When_creating_a_simple_request_response_handler" executed="True" result="Success" success="True" time="10.208" asserts="0">
                <results>
                  <test-case name="MassTransit.Tests.When_creating_a_simple_request_response_handler.A_clean_method_of_a_request_reply_should_be_possible" executed="True" result="Success" success="True" time="0.550" asserts="2" />
                  <test-case name="MassTransit.Tests.When_creating_a_simple_request_response_handler.A_conditional_consumer_should_not_get_the_message_if_it_is_not_wanted" executed="True" result="Success" success="True" time="4.548" asserts="2" />
                  <test-case name="MassTransit.Tests.When_creating_a_simple_request_response_handler.A_timeout_handler_should_be_supported" executed="True" result="Success" success="True" time="1.525" asserts="1" />
                  <test-case name="MassTransit.Tests.When_creating_a_simple_request_response_handler.An_asynchronous_model_should_be_supported" executed="True" result="Success" success="True" time="0.525" asserts="2" />
                  <test-case name="MassTransit.Tests.When_creating_a_simple_request_response_handler.Any_type_of_send_should_be_supported" executed="True" result="Success" success="True" time="0.528" asserts="2" />
                  <test-case name="MassTransit.Tests.When_creating_a_simple_request_response_handler.When_an_asynchronous_timeout_occurs_we_should_get_our_timeout_action_called" executed="True" result="Success" success="True" time="2.532" asserts="2" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="When_more_messages_are_sent_than_expected" executed="True" result="Inconclusive" success="False" time="0.001" asserts="0">
                <results>
                  <test-case name="MassTransit.Tests.When_more_messages_are_sent_than_expected.The_batch_should_throw_an_error" executed="False" result="Ignored">
                    <reason>
                      <message><![CDATA[Not sure how to test, but this is right]]></message>
                    </reason>
                  </test-case>
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="When_publishing_a_message_with_an_each_consumer_action_specified" executed="True" result="Success" success="True" time="2.659" asserts="0">
                <results>
                  <test-case name="MassTransit.Tests.When_publishing_a_message_with_an_each_consumer_action_specified.The_method_should_be_called_for_each_destination_endpoint" executed="True" result="Success" success="True" time="0.527" asserts="2" />
                  <test-case name="MassTransit.Tests.When_publishing_a_message_with_an_each_consumer_action_specified.The_method_should_be_called_for_each_destination_endpoint_when_there_are_multiple" executed="True" result="Success" success="True" time="0.521" asserts="3" />
                  <test-case name="MassTransit.Tests.When_publishing_a_message_with_an_each_consumer_action_specified.The_method_should_not_be_called_when_there_are_no_subscribers" executed="True" result="Success" success="True" time="1.016" asserts="1" />
                  <test-case name="MassTransit.Tests.When_publishing_a_message_with_an_each_consumer_action_specified.The_method_should_not_carry_over_to_the_next_call_context" executed="True" result="Success" success="True" time="0.595" asserts="1" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="When_publishing_a_message_with_no_consumers" executed="True" result="Success" success="True" time="1.530" asserts="0">
                <results>
                  <test-case name="MassTransit.Tests.When_publishing_a_message_with_no_consumers.The_method_should_be_called_to_notify_the_caller" executed="True" result="Success" success="True" time="1.017" asserts="2" />
                  <test-case name="MassTransit.Tests.When_publishing_a_message_with_no_consumers.The_method_should_not_carry_over_the_subsequent_calls" executed="True" result="Success" success="True" time="0.512" asserts="1" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="When_the_number_of_messages_in_a_batch_is_zero" executed="True" result="Success" success="True" time="0.524" asserts="0">
                <results>
                  <test-case name="MassTransit.Tests.When_the_number_of_messages_in_a_batch_is_zero.The_batch_should_not_be_dispatched" executed="True" result="Success" success="True" time="0.520" asserts="0" />
                </results>
              </test-suite>
            </results>
          </test-suite>
        </results>
      </test-suite>
    </results>
  </test-suite>
</test-results>